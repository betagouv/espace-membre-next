name: Node.js CI

on: [push, pull_request]

jobs:
    build:
        runs-on: ubuntu-latest

        strategy:
            matrix:
                node-version: [18.x]

        steps:
            - uses: nev7n/wait_for_response@v1
              id: wait
              with:
                url: "${{format('https://${0}-pr{1}.osc-fr1.scalingo.io', github.repository, github.event.pull_request.number)}}"
                responseCode: 200
                timeout: 1200000 # ms = 20mins
                interval: 30000 # ms = 30secs
            - name: output
              env:
                URL: "${{format('https://${0}-pr{1}.osc-fr1.scalingo.io', github.repository, github.event.pull_request.number)}}"
              run: |
                echo $URL
            - name: Create artifact of test coverage
              if: steps.wait.outcome == 'success'
              run: |
                echo "success!"
            - uses: actions/checkout@v2
            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v1
              with:
                  node-version: ${{ matrix.node-version }}
            - name: Setup PostgreSQL
              uses: Harmon758/postgresql-action@v1.0.0
              with:
                  postgresql db: postgres
                  postgresql user: postgres
                  postgresql password: postgres
            - run: npm install
            - run: npm run build --if-present
              env:
                  CI: true
                  FEATURE_SHOULD_SEND_MESSAGE_TO_AUTHOR: true
                  NEWSLETTER_HASH_SECRET: fakenewslettersecret
                  SHOULD_SEND_NL: true
                  OVH_APP_KEY: fakeovhkey
                  OVH_APP_SECRET: fakeovhsecret
                  OVH_CONSUMER_KEY: fakeconsumerkey
                  SESSION_SECRET: fakesessionsecret
                  CHAT_WEBHOOK_URL_SECRETARIAT: https://example.com
                  CHAT_WEBHOOK_URL_GENERAL: https://example.com
                  CHAT_WEBHOOK_URL_DINUM: https://example.com
                  CHAT_WEBHOOK_URL_GIP: https://example.com
                  MATTERMOST_BOT_TOKEN: faketoken
                  MATTERMOST_INVITE_ID: fakeid
                  MAIL_PASS: fakepass
                  MAIL_USER: fakeuser
                  MAIL_SENDER: fake@localhost
                  DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
                  HOSTNAME: localhost
                  HASH_SALT: fakesaltfortestenv
                  GITHUB_FORK: dummy-github-fork
                  MAILING_LIST_NEWSLETTER: 0
                  REDIS_URL: "dummy-url"
                  GITHUB_CLIENT_ID: dumygithubclient
                  GITHUB_CLIENT_SECRET: dummygithubsecret
            - run: npm run test
              env:
                  CI: true
                  FEATURE_SHOULD_SEND_MESSAGE_TO_AUTHOR: true
                  NEWSLETTER_HASH_SECRET: fakenewslettersecret
                  SHOULD_SEND_NL: true
                  OVH_APP_KEY: fakeovhkey
                  OVH_APP_SECRET: fakeovhsecret
                  OVH_CONSUMER_KEY: fakeconsumerkey
                  SESSION_SECRET: fakesessionsecret
                  CHAT_WEBHOOK_URL_SECRETARIAT: https://example.com
                  CHAT_WEBHOOK_URL_GENERAL: https://example.com
                  CHAT_WEBHOOK_URL_DINUM: https://example.com
                  CHAT_WEBHOOK_URL_GIP: https://example.com
                  MATTERMOST_BOT_TOKEN: faketoken
                  MATTERMOST_INVITE_ID: fakeid
                  MAIL_PASS: fakepass
                  MAIL_USER: fakeuser
                  MAIL_SENDER: fake@localhost
                  DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
                  HOSTNAME: localhost
                  HASH_SALT: fakesaltfortestenv
                  GITHUB_FORK: dummy-github-fork
                  MAILING_LIST_NEWSLETTER: 0
                  REDIS_URL: "dummy-url"
                  GITHUB_CLIENT_ID: dumygithubclient
                  GITHUB_CLIENT_SECRET: dummygithubsecret
